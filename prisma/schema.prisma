generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  schemas           = ["next_auth", "public"]
}

model accounts {
  id                 String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         BigInt?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  userId             String?          @db.Uuid
  users              next_auth_users? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId], map: "provider_unique")
  @@schema("next_auth")
}

model sessions {
  id           String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expires      DateTime         @db.Timestamptz(6)
  sessionToken String           @unique(map: "sessiontoken_unique")
  userId       String?          @db.Uuid
  users        next_auth_users? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("next_auth")
}

model next_auth_users {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?
  email         String?       @unique(map: "email_unique")
  emailVerified DateTime?     @db.Timestamptz(6)
  image         String?
  accounts      accounts[]
  sessions      sessions[]
  users         public_users?

  @@map("users")
  @@schema("next_auth")
}

model verification_tokens {
  identifier String?
  token      String   @id
  expires    DateTime @db.Timestamptz(6)

  @@unique([token, identifier], map: "token_identifier_unique")
  @@schema("next_auth")
}

model bubble {
  name                                   String        @db.VarChar
  description                            String        @db.VarChar
  created_at                             DateTime      @default(now()) @db.Timestamptz(6)
  id                                     String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  owner                                  String?       @default(dbgenerated("auth.uid()")) @db.Uuid
  greet_message                          String        @default("Hello, how can I help you?")
  users                                  public_users? @relation(fields: [owner], references: [id], onDelete: Cascade, onUpdate: NoAction)
  embeddings_embeddings_bubbleTobubble   embeddings[]  @relation("embeddings_bubbleTobubble")
  info_entity_info_entity_bubbleTobubble info_entity[] @relation("info_entity_bubbleTobubble")

  @@schema("public")
}

model info_entity {
  id                                String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type                              String       @db.VarChar
  data                              String       @db.VarChar
  created_at                        DateTime     @default(now()) @db.Timestamptz(6)
  bubble                            String       @db.Uuid
  processed                         Int          @default(-1) @db.SmallInt
  tokens                            BigInt?
  url                               String?
  embeddings                        embeddings[]
  bubble_info_entity_bubbleTobubble bubble       @relation("info_entity_bubbleTobubble", fields: [bubble], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model public_users {
  id           String          @id @db.Uuid
  name         String?
  email        String?
  image        String?
  max_entities BigInt          @default(0)
  max_usage    BigInt          @default(0)
  usage        BigInt          @default(0)
  bubble       bubble[]
  users        next_auth_users @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("users")
  @@schema("public")
}

model embeddings {
  id                               BigInt                @id @default(autoincrement())
  content                          String
  embedding                        Unsupported("vector")
  entity                           String                @db.Uuid
  bubble                           String                @db.Uuid
  bubble_embeddings_bubbleTobubble bubble                @relation("embeddings_bubbleTobubble", fields: [bubble], references: [id], onDelete: Cascade, onUpdate: NoAction)
  info_entity                      info_entity           @relation(fields: [entity], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}
